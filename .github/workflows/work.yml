name: Build & Publish Release Version, Build Docker image & Push 
 
on:
  push:
    tags:
      - "*"

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target:
          # - x86_64-unknown-linux-gnu
          # - aarch64-unknown-linux-gnu
          - x86_64-unknown-linux-musl
          - aarch64-unknown-linux-musl
          - x86_64-pc-windows-gnu  
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - name: Install cross
        run: cargo install cross

      # - name: Install cross-compilation toolchains
      #   run: |
      #     rustup target add x86_64-unknown-linux-gnu
      #     rustup target add aarch64-unknown-linux-gnu
      #     rustup target add x86_64-pc-windows-gnu

      - name: Install cross-compilation toolchains
        run: |
          rustup target add x86_64-unknown-linux-musl
          rustup target add aarch64-unknown-linux-musl
          rustup target add x86_64-pc-windows-gnu  

      - name: Install musl-tools for Linux targets
        if: matrix.target != 'x86_64-pc-windows-gnu'
        run: sudo apt-get install -y musl-tools

      - name: Build wol
        run: cross build --release --target ${{ matrix.target }} --package wol

      - name: Build web-api
        run: cross build --release --target ${{ matrix.target }} --package web-api

      - name: Upload binaries as artifacts
        uses: actions/upload-artifact@v4
        with:
          name: binaries-${{ matrix.target }}
          path: |
            ${{ format('target/{0}/release/{1}', matrix.target, matrix.target == 'x86_64-pc-windows-gnu' && 'wol.exe' || 'wol') }}
            ${{ format('target/{0}/release/{1}', matrix.target, matrix.target == 'x86_64-pc-windows-gnu' && 'web-api.exe' || 'web-api') }}

  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download binaries
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false

      - name: Upload Release Assets
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: artifacts/binaries-x86_64-unknown-linux-musl/wol
          asset_name: wol-x86_64-unknown-linux-gnu
          asset_content_type: application/octet-stream

      - name: Upload Release Assets
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: artifacts/binaries-x86_64-unknown-linux-musl/web-api
          asset_name: web-api-x86_64-unknown-linux-gnu
          asset_content_type: application/octet-stream

      - name: Upload Release Assets
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: artifacts/binaries-aarch64-unknown-linux-musl/wol
          asset_name: wol-aarch64-unknown-linux-gnu
          asset_content_type: application/octet-stream

      - name: Upload Release Assets
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: artifacts/binaries-aarch64-unknown-linux-musl/web-api
          asset_name: web-api-aarch64-unknown-linux-gnu
          asset_content_type: application/octet-stream

      - name: Upload Release Assets
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: artifacts/binaries-x86_64-pc-windows-gnu/wol.exe
          asset_name: wol-x86_64-pc-windows-gnu.exe
          asset_content_type: application/octet-stream

      - name: Upload Release Assets
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: artifacts/binaries-x86_64-pc-windows-gnu/web-api.exe
          asset_name: web-api-x86_64-pc-windows-gnu.exe
          asset_content_type: application/octet-stream

  build-and-push:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Download binaries
        uses: actions/download-artifact@v4
        with:
          path: artifacts 

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./docker/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            ${{ secrets.DOCKER_HUB_USERNAME }}/wol-web-api:${{ github.ref_name }}
            ${{ secrets.DOCKER_HUB_USERNAME }}/wol-web-api:latest